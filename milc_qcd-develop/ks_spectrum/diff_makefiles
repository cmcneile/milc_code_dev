17c17
< ARCH ?= # skx knl knc hsw pow8 pow9
---
> ARCH = # knl knc hsw
22c22
< COMPILER ?= intel # gnu, intel, ibm, portland, cray-intel
---
> COMPILER = gnu # intel, ibm, portland, cray-intel
28c28
< MPP ?= false
---
> MPP = true
34c34
< PRECISION ?= 1
---
> PRECISION = 2
43,44c43,44
<     MY_CC ?= mpiicc
<     MY_CXX ?= mpiicpc
---
>     CC = mpiicc
>     CXX = mpiicpc
46,47c46,47
<     MY_CC  ?= icc
<     MY_CXX ?= icpc
---
>     CC  = icc
>     CXX = icpc
53,54c53,54
<     MY_CC ?= cc
<     MY_CXX ?= CC
---
>     CC = cc
>     CXX = CC
56,57c56,57
<     MY_CC  ?= icc
<     MY_CXX ?= icpc
---
>     CC  = icc
>     CXX = icpc
63,64c63,64
<     MY_CC ?= mpicc
<     MY_CXX ?= mpiCC
---
>     CC = mpicc
>     CXX = mpiCC
66,77c66,67
<     MY_CC  ?= gcc
<     MY_CXX ?= g++
<   endif
< 
< else ifeq ($(strip ${COMPILER}),ibm)
< 
<   ifeq ($(strip ${MPP}),true)
<     MY_CC ?= mpixlc_r
<     MY_CXX ?= mpixlcxx_r
<   else
<     MY_CC ?= xlc_r
<     MY_CXX ?= xlc++_r
---
>     CC  = gcc
>     CXX = CC
82,84d71
< CC = ${MY_CC}
< CXX = ${MY_CXX}
< 
101d87
< # Power9 recommendations are -Ofast
103c89
< OPT              ?= -O3
---
> OPT              = -O3
107c93
< OMP ?= #true
---
> OMP = #true
117,125d102
<   OCXXFLAGS += -std=c++11
< 
<   ifeq ($(strip ${ARCH}),pow8)
<     ARCH_FLAG = -mcpu=power8
<   endif
< 
<   ifeq ($(strip ${ARCH}),pow9)
<     ARCH_FLAG = -mcpu=power9 -mtune=power9
<   endif
126a104
>  
129,130c107
<     OCXXFLAGS += -fopenmp
<     LDFLAGS += -fopenmp
---
>     LDFLAGS = -fopenmp
135,136c112
< # enable all warnings with exceptions
< OCFLAGS += -Wall -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unknown-pragmas -Wno-unused-function
---
> #OCFLAGS += -Wall
144,152c120
<   OCFLAGS = -std=gnu99
<   OCXXFLAGS += -std=c++11
< 
<   # consider running with XLSMPOPTS=stack=10M or higher
<   ifeq ($(strip ${OMP}),true)
<     OCFLAGS += -qsmp=omp
<     OCXXFLAGS += -qsmp=omp
<     LDFLAGS += -qsmp=omp
<   endif
---
>   OCFLAGS = -qarch=450 -qlanglvl=stdc99 # BG/P BG/Q
161d128
<   OCXXFLAGS += -std=c++11
169,171d135
<   else ifeq ($(strip ${ARCH}),skx)
<   ARCH_FLAG = -xCORE-AVX512 -qopt-zmm-usage=high
<   BINEXT=.skx
181d144
<   OCXXFLAGS += ${ARCH_FLAG}
184d146
<   OCXXFLAGS += -parallel-source-info=2 -debug inline-debug-info -qopt-report=5
188,189c150
<     OCXXFLAGS += -qopenmp
<     LDFLAGS += -qopenmp
---
>     LDFLAGS = -qopenmp
199d159
<   OCXXFLAGS += -std=c++11
216d175
<   OCXXFLAGS += ${ARCH_FLAG}
219d177
<   OCXXFLAGS += -parallel-source-info=2 -debug inline-debug-info -qopt-report=5
223,224c181
<     OCXXFLAGS += -qopenmp
<     LDFLAGS += -qopenmp
---
>     LDFLAGS = -qopenmp
289,291c246
< WANTQOP ?= # true # or blank. Implies HAVEQDP, HAVEQOP, HAVEQMP.
< 
< WANTQIO ?= true # true # or blank.  Implies HAVEQMP.
---
> WANTQOP = # true # or blank. Implies HAVEQDP, HAVEQOP, HAVEQMP.
293c248
< WANTQMP ?= true # true or blank.
---
> WANTQIO = true  # or blank.  Implies HAVEQMP.
295,296c250
< # QMP_MPI or QMP_SPI
< QMP_BACKEND = QMP_MPI
---
> WANTQMP = # true or blank.
301,302c255,256
< SCIDAC = ${HOME}/scidac/install
< TAG=
---
> ##SCIDAC = ${HOME}/scidac/install
> SCIDAC = /home/cmcneile/code/milc/2016/scidac/install
304,305c258,259
< QMPPAR = /Users/cmcneile/code/milc/git_sept_2016/deflate/scidac/install/qmp
< QIOPAR = /Users/cmcneile/code/milc/git_sept_2016/deflate/scidac/install/qio
---
> QMPPAR = ${SCIDAC}/qmp
> QIOPAR = $(SCIDAC)/qio
307,311c261,265
< QMPSNG = /Users/cmcneile/code/milc/git_sept_2016/deflate/scidac/install/qmp
< QIOSNG = /Users/cmcneile/code/milc/git_sept_2016/deflate/scidac/install/qio
< 
< 
< QLA ?= ${SCIDAC}/qla${TAG}
---
> ##QMPSNG = ${SCIDAC}/qmp-single
> ##QIOSNG = $(SCIDAC)/qio-single
> QMPSNG = ${SCIDAC}/qmp
> QIOSNG = $(SCIDAC)/qio
> QLA = ${SCIDAC}/qla
313,314c267,269
< QDP ?= ${SCIDAC}/qdp${TAG}
< QOPQDP ?= ${SCIDAC}/qopqdp${TAG}
---
> QDP = ${SCIDAC}/qdp
> QOPQDP = ${SCIDAC}/qopqdp
> #QOPQDP = ${SCIDAC}/qopqdp-lapack # BG/P
327,337d281
< # 12. Intel MKL for FFTW and LAPACK
< 
< ifeq ($(strip ${COMPILER}),intel)
<   INCFFTW = -mkl
<   LIBFFTW = -mkl
< else ifeq ($(strip ${COMPILER}),cray-intel)
<   INCFFTW = -mkl
<   LIBFFTW = -mkl
< endif
< 
< #----------------------------------------------------------------------
340c284
< WANTFFTW = #true    # On cori, edison loaded by default, but need "true"
---
> WANTFFTW = #true
346,347c290
<   FFTW_HEADERS = ${FFTW}/float-mvapich2/include
<   INCFFTW = -I${FFTW_HEADERS}
---
>   INCFFTW = -I${FFTW}/float-mvapich2/include
351,352c294
<   FFTW_HEADERS = ${FFTW}/double-mvapich2/include
<   INCFFTW = -I${FFTW_HEADERS}
---
>   INCFFTW = -I${FFTW}/double-mvapich2/include
356d297
<   PACKAGE_HEADERS += ${FFTW_HEADERS}
368c309
< # LIBLAPACK = -L/usr/local/lib64 -llapack -lblas
---
> #LIBLAPACK = -L/usr/local/lib64 -llapack -lblas
372,373c313,314
< # LDFLAGS = -Wl,-rpath,"/usr/local/atlas-3.10-lapack-3.4.2/lib" -L/usr/local/atlas-3.10-lapack-3.4.2/lib
< # LIBS = $(LDFLAGS) -lprimme -lm  -llapack -lptf77blas -lptcblas -latlas -lgfortran -lpthread
---
> #LDFLAGS = -Wl,-rpath,"/usr/local/atlas-3.10-lapack-3.4.2/lib" -L/usr/local/atlas-3.10-lapack-3.4.2/lib
> #LIBS = $(LDFLAGS) -lprimme -lm  -llapack -lptf77blas -lptcblas -latlas -lgfortran -lpthread
375c316
< # NERSC Cori Haswell
---
> # NERSC Cori
378,380d318
< # NERSC Cori KNL
< # LIBLAPACK = -L${LIBSCI_BASE_DIR}/INTEL/15.0/mic_knl/lib -lsci_intel
< 
389c327
< # PRIMME version 2.0
---
> # PRIMME version 1.1
392,395c330
<   PRIMME_HEADERS = ${HOME}/PRIMME/include
<   INCPRIMME = -I${PRIMME_HEADERS}
<   PACKAGE_HEADERS += ${PRIMME_HEADERS}
<   LIBPRIMME = -L${HOME}/PRIMME/lib -lprimme
---
>   LIBPRIMME = -L${HOME}/milc/install/PRIMME -lzprimme
398,401c333
< #----------------------------------------------------------------------
< # 14. ARPACK Options (for ks_eigen).  REQUIRES LAPACK AS WELL.
< 
< WANTARPACK = #true
---
> # PRIMME version 1.2
403,406c335,337
< ifeq ($(strip ${WANTARPACK}),true)
< #  LIBARPACK = -L/usr/lib64 -lparpack  -larpack -lifcore -llapack -lblas
<   LIBARPACK = -L/usr/lib64 -larpack
< endif
---
> # ifeq ($(strip ${WANTPRIMME}),true)
> #   LIBPRIMME = -L${HOME}/milc/install/PRIMME -lprimme
> # endif
411,419c342,347
< WANTQUDA    ?= #true
< WANT_CL_BCG_GPU ?= #true
< WANT_FN_CG_GPU ?= #true
< WANT_FL_GPU ?= #true
< WANT_FF_GPU ?= #true
< WANT_GF_GPU ?= #true
< 
< # enabled mixed-precision solvers for QUDA (if set, overrides HALF_MIXED and MAX_MIXED macros)
< WANT_MIXED_PRECISION_GPU ?= 0
---
> WANTQUDA    = #true
> WANT_CL_BCG_GPU = #true
> WANT_FN_CG_GPU = #true
> WANT_FL_GPU = #true
> WANT_FF_GPU = #true
> WANT_GF_GPU = #true
423c351
<   QUDA_HOME ?= ${HOME}/quda
---
>   QUDA_HOME = ${HOME}/quda
425,426c353
<   INCQUDA = -I${QUDA_HOME}/include -I${QUDA_HOME}/tests
<   PACKAGE_HEADERS += ${QUDA_HOME}/include
---
>   INCQUDA = -I${QUDA_HOME}/include -I/lib -I${QUDA_HOME}/tests
430c357
<   CUDA_HOME ?= /usr/local/cuda
---
>   CUDA_HOME = /usr/local/cuda
432,434c359
<   PACKAGE_HEADERS += ${CUDA_HOME}/include
<   LIBQUDA += -L${CUDA_HOME}/lib64 -lcudart -lcuda
<   QUDA_HEADERS = ${QUDA_HOME}/include
---
>   LIBQUDA += -L${CUDA_HOME}/lib64 -lcudart
465,470d389
<   ifeq ($(strip ${WANT_MIXED_PRECISION_GPU}),1)
<     CGPU += -DHALF_MIXED # use single precision where appropriate
<   else ifeq ($(strip ${WANT_MIXED_PRECISION_GPU}),2)
<     CGPU += -DMAX_MIXED # use half precision where appropriate
<   endif
< 
478,479d396
< 
< 
484,485d400
< WANT_FN_CG_QPHIX = true
< WANT_GF_QPHIX = true
487c402
< QPHIX_HOME = ../QPhiX_MILC/milc-qphix
---
> QPHIX_HOME = ${HOME}/QPhiX/mbench
492d406
<   PACKAGE_HEADERS += ${QPHIX_HOME}
495d408
<   QPHIX_HEADERS = ${QPHIX_HOME}
507,508c420
<   else ifeq ($(strip ${ARCH}),skx)
<     LIBQPHIX = -L${QPHIX_HOME} -lqphixmilc_skx -lrt
---
>   else
521,563d432
<   else ifeq ($(strip ${ARCH}),skx)
<     LIBQPHIX = -L${QPHIX_HOME} -lqphixmilc_skx_single -lrt
<   endif
< 
<   endif
< 
<   QPHIX_HEADERS   = ${QPHIX_HOME}
<   PACKAGE_HEADERS += ${QPHIX_HEADERS}
<   QPHIX_LIBRARIES = ${QPHIX_HOME}
< 
<   ifeq ($(strip ${WANT_FN_CG_QPHIX}),true)
<     HAVE_FN_CG_QPHIX = true
<     CPHI += -DUSE_CG_QPHIX
<   endif
< 
<   ifeq ($(strip ${WANT_GF_QPHIX}),true)
<     HAVE_GF_QPHIX = true
<     CPHI += -DUSE_GF_QPHIX
<   endif
< 
< endif
< 
< #----------------------------------------------------------------------
< # 16. Grid Options
< 
< WANTGRID = #true
< 
< ifeq ($(strip ${WANTGRID}), true)
< 
<   HAVE_GRID = true
<   CPHI += -DHAVE_GRID
< 
<   CPHI += -DGRID_MULTI_CG=GRID_5DCG # Choices: GRID_BLOCKCG GRID_5DCG GRID_MRHSCG
<   CPHI += -DGRID_SHMEM_MAX=2048
< 
<   ifeq ($(strip ${MPP}),true)
<     ifeq ($(strip ${ARCH}),knl)
<       GRID_ARCH = avx512
<     else ifeq ($(strip ${ARCH}),skx)
<       GRID_ARCH = avx512
<     else ifeq ($(strip ${ARCH}),hsw)
<       GRID_ARCH = avx2
<     endif
565,568d433
<     # Scalar version                                                                
< 
<     GRID_ARCH = scalar
< 
571,610d435
<   GRID_HOME = ../Grid/install-${GRID_ARCH}
<   GRID_LIBRARIES = ${GRID_HOME}/lib
<   LIBGRID = -L${GRID_LIBRARIES} -lGrid
<   GRID_HEADERS = ${GRID_HOME}/include
<   INCGRID = -I${GRID_HEADERS}
< 
<   PACKAGE_HEADERS += ${GRID_HEADERS}/Grid
<   PACKAGE_DEPS += Grid
< 
< endif
< 
< #----------------------------------------------------------------------
< # 16. QPhiXJ (JLab) Options
< 
< WANTQPHIXJ = #true
< 
< # Choose vectorization parameters.
< # Choices 4, 8 (or 1 for scalar)
< QPHIXJ_SOALEN=4
< 
< ifeq ($(strip ${WANTQPHIXJ}), true)
< 
<   HAVE_QPHIXJ = true
<   CPHI += -DHAVE_QPHIXJ
< 
<   ifeq ($(strip ${MPP}),true)
< 
<     # QMP versions of QPHIXJ
< 
<     QPHIXJ_HOME = ../QPhiX_JLab/install
< 
<     ifeq ($(strip ${ARCH}),knl)
<       QPHIXJ_ARCH = avx512
<     else ifeq ($(strip ${ARCH}),hsw)
<       QPHIXJ_ARCH = avx2
<     endif
<   else
<     # Scalar version
<     QPHIXJ_ARCH = scalar
<     QPHIXJ_SOALEN = 1
613,623d437
<   # NOTE: These are QMP versions of QPHIXJ so requires QMP
< 
<   QPHIXJ_HOME = ../QPhiX_JLab/install/dslash-${QPHIXJ_ARCH}-s${QPHIXJ_SOALEN}
<   QPHIXJ_LIBRARIES = ${QPHIXJ_HOME}/lib
<   LIBQPHIXJ = -L${QPHIXJ_LIBRARIES} -lqphix_solver -lqphix_codegen
<   QPHIXJ_HEADERS = ${QPHIXJ_HOME}/include
<   INCQPHIXJ = -I${QPHIXJ_HEADERS}
< 
<   PACKAGE_HEADERS += ${QPHIXJ_HEADERS}
<   PACKAGE_DEPS += QPhiX_JLab
< 
627c441
< # 17. Linker (need the C++ linker for QUDA, QPHIX, GRID)
---
> # 17. Linker (need the C++ linker for QUDA and QPHIX)
634,637d447
<   else ifeq ($(strip ${WANTQPHIXJ}),true)
<     LD  = ${CXX}
<   else ifeq ($(strip ${WANTGRID}),true)
<     LD  = ${CXX}
740c550
< CDEBUG = -DCG_OK -DREMAP_STDIO_APPEND # -DCHECK_MALLOC 
---
> CDEBUG = -DCG_OK -DREMAP_STDIO_APPEND -DCG_DEBUG  # -DCHECK_MALLOC 
778c588
< CGEOM ?=#-DFIX_NODE_GEOM
---
> CGEOM =#-DFIX_NODE_GEOM
812,820c622
< # If we are using QUDA, the backward links are unused, so we should
< # avoid unecessary overhead and use the standard dslash.  Note that
< # dslash_fn also has hooks in place to offload any dslash_fn_field
< # calls to QUDA
< ifeq ($(strip ${WANTQUDA}),true)
<   KSCGSTORE = -DFEWSUMS
< else
<   KSCGSTORE = -DDBLSTORE_FN -DFEWSUMS -DD_FN_GATHER13
< endif
---
> KSCGSTORE = -DDBLSTORE_FN -DFEWSUMS -DD_FN_GATHER13 
851c653
< # HALF_MIXED         (not QUDA) If PRECISION=2, do multimass solve in single precision
---
> # HALF_MIXED         If PRECISION=2, do multimass solve in single precision
853,855d654
< # HALF_MIXED         (QUDA) If PRECISION=2, use double-single mixed-precision solvers
< # MAX_MIXED          (QUDA) Use double-half or single-half mixed-precision solvers
< #                    (for multi-shift, behavior is as HALF_MIXED)
858,861d656
< # PRIMME_PRECOND
< # POLY_EIGEN
< # MATVEC_PRECOND
< # CHEBYSHEV_EIGEN
863c658
< KSCGMULTI = -DKS_MULTICG=HYBRID # -DNO_REFINE # -DHALF_MIXED
---
> KSCGMULTI = -DKS_MULTICG=HYBRID # -DHALF_MIXED # -DNO_REFINE
945c740
< INCADD = ${INCFFTW} ${INCPRIMME} ${INCQUDA} ${INCQPHIX} ${INCQPHIXJ} ${INCGRID} ${INCVTUNE}
---
> INCADD = ${INCFFTW} ${INCQUDA} ${INCQPHIX} ${INCVTUNE}
950c745,749
< LIBADD = ${LIBFFTW} ${LIBPRIMME} ${LIBARPACK} ${LIBLAPACK} ${LIBQUDA} ${LIBQPHIX} ${LIBQPHIXJ} ${LIBGRID} ${LIBVTUNE}
---
> LIBADD = ${LIBFFTW} ${LIBPRIMME} ${LIBLAPACK} ${LIBQUDA} ${LIBVTUNE}
> 
> ifeq ($(strip ${WANTQPHIX}), true)
>   LIBADD += ${LIBQPHIX}
> endif
971d769
<   OCXXFLAGS += -DOMP
979c777
<      COMMTYPE = MPI_COMMS
---
>      COMMTYPE = MPI
1004,1011d801
< ifeq ($(strip ${WANTQPHIXJ}),true)
<   QPHIXPREC = -DQPHIXJ_PrecisionInt=${PRECISION}
< endif
< 
< ifeq ($(strip ${WANTGRID}),true)
<   GRIDPREC = -DGRID_PrecisionInt=${PRECISION}
< endif
< 
1026,1029d815
< ifeq ($(strip ${WANTARPACK}),true)
<   HAVEARPACK = true
< endif
< 
1035c821
< CPREC = -DMILC_PRECISION=${PRECISION} ${QDPPREC} ${QOPPREC} ${QPHIXPREC} ${GRIDPREC}
---
> CPREC = -DPRECISION=${PRECISION} ${QDPPREC} ${QOPPREC} ${QPHIXPREC}
1041,1043d826
< 	${DEFINES} ${ADDDEFINES} ${IMPI} ${INCADD}
< CXXFLAGS = ${OPT} ${OCXXFLAGS} -D${COMMTYPE} ${CODETYPE} ${INLINEOPT} \
<         ${CPREC} ${CLFS} ${INCSCIDAC} -I${MYINCLUDEDIR} ${DARCH} \
